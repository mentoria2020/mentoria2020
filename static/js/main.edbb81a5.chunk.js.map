{"version":3,"sources":["assets/images/image_bg.jpg","icons.js","components/HeaderComponent.js","components/ContainerMainComponent.js","screens/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IconsCSS","concat","FontAwesome_ttf","Entypo_ttf","Octicons_ttf","SimpleLineIcons_ttf","MaterialIcons_ttf","EvilIcons_ttf","Feather_ttf","Ionicons_ttf","MaterialCommunityIcons_ttf","style","document","createElement","type","styleSheet","cssText","appendChild","createTextNode","head","Container","styled","div","_templateObject","ContainerMainHeader","_templateObject2","TitleHeader","span","_templateObject3","HeaderComponent","props","react_default","a","text1","ContainerMainComponent_templateObject","Image","img","ContainerMainComponent_templateObject2","ButtonOverlay","ContainerMainComponent_templateObject3","Group","_templateObject4","SubtitleContent","_templateObject5","TitleContent","_templateObject6","ButtonPortal","_templateObject7","TitleButton","_templateObject8","ContainerComponentStack","_templateObject9","ContainerMainComponent","ContainerMainComponent_Container","href","src","require","Layout","Home_templateObject","Home","components_HeaderComponent","width","height","components_ContainerMainComponent","App","screens_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qSCUlCC,EAAQ,8BAAAC,OAEDC,IAFC,iEAAAD,OAMDE,IANC,4DAAAF,OAUDG,IAVC,8DAAAH,OAcDI,IAdC,qEAAAJ,OAkBDK,IAlBC,mEAAAL,OAsBDM,IAtBC,+DAAAN,OA0BDO,IA1BC,6DAAAP,OA8BDQ,IA9BC,8DAAAR,OAkCDS,IAlCC,mDAuCRC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,KAAO,WACTH,EAAMI,WAAYJ,EAAMI,WAAWC,QAAUhB,EAC5CW,EAAMM,YAAYL,SAASM,eAAelB,IAE/CY,SAASO,KAAKF,YAAYN,2uBCzC1B,IAAMS,EAAYC,IAAOC,IAAVC,KAKTC,EAAsBH,IAAOC,IAAVG,KAgBnBC,EAAcL,IAAOM,KAAVC,KAeFC,EA9Cf,SAAyBC,GACvB,OACEC,EAAAC,EAAAnB,cAACO,EAAcU,EACbC,EAAAC,EAAAnB,cAACW,EAAD,KACEO,EAAAC,EAAAnB,cAACa,EAAD,KAAcI,EAAMG,OAAS,s9DCiBrC,IAAMb,EAAYC,IAAOC,IAAVY,KAKTC,EAAQd,IAAOe,IAAVC,KAOLC,EAAgBjB,IAAOW,EAAVO,KAWbC,EAAQnB,IAAOC,IAAVmB,KASLC,EAAkBrB,IAAOM,KAAVgB,KAQfC,EAAevB,IAAOM,KAAVkB,KAQZC,EAAezB,IAAOC,IAAVyB,KAkBZC,EAAc3B,IAAOM,KAAVsB,KAQXC,EAA0B7B,IAAOC,IAAV6B,KAUdC,GAzGf,SAAgCtB,GAC9B,OACEC,EAAAC,EAAAnB,cAACwC,EAAcvB,EACbC,EAAAC,EAAAnB,cAACqC,EAAD,KACEnB,EAAAC,EAAAnB,cAAC2B,EAAD,KACIT,EAAAC,EAAAnB,cAAC6B,EAAD,kBACAX,EAAAC,EAAAnB,cAAC+B,EAAD,0CACAb,EAAAC,EAAAnB,cAACiC,EAAD,KACEf,EAAAC,EAAAnB,cAACyB,EAAD,CAAegB,KAAK,4CAClBvB,EAAAC,EAAAnB,cAACmC,EAAD,yBAIRjB,EAAAC,EAAAnB,cAACsB,EAAD,CACEoB,IAAKC,EAAQ,0LCSvB,IAAMC,GAASpC,IAAOC,IAAVoC,MAQGC,GA7Bf,SAAc7B,GACZ,OACEC,EAAAC,EAAAnB,cAAC4C,GAAD,KACE1B,EAAAC,EAAAnB,cAAC+C,EAAD,CACEjD,MAAO,CACLkD,MAAO,OACPC,OAAQ,KAEV7B,MAAM,KAGRF,EAAAC,EAAAnB,cAACkD,GAAD,CACIpD,MAAO,CACLkD,MAAO,OACPC,OAAQ,mBCVLE,OAJf,WACE,OAAOjC,EAAAC,EAAAnB,cAACoD,GAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,0DCZNC,IAASC,OAAOzC,EAAAC,EAAAnB,cAAC4D,GAAD,MAAS7D,SAAS8D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.edbb81a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image_bg.78d7aa03.jpg\";","/* eslint-disable camelcase */\r\nimport FontAwesome_ttf from \"react-native-vector-icons/Fonts/FontAwesome.ttf\";\r\nimport Entypo_ttf from \"react-native-vector-icons/Fonts/Entypo.ttf\";\r\nimport Octicons_ttf from \"react-native-vector-icons/Fonts/Octicons.ttf\";\r\nimport SimpleLineIcons_ttf from \"react-native-vector-icons/Fonts/SimpleLineIcons.ttf\";\r\nimport MaterialIcons_ttf from \"react-native-vector-icons/Fonts/MaterialIcons.ttf\";\r\nimport EvilIcons_ttf from \"react-native-vector-icons/Fonts/EvilIcons.ttf\";\r\nimport Feather_ttf from \"react-native-vector-icons/Fonts/Feather.ttf\";\r\nimport Ionicons_ttf from \"react-native-vector-icons/Fonts/Ionicons.ttf\";\r\nimport MaterialCommunityIcons_ttf from \"react-native-vector-icons/Fonts/MaterialCommunityIcons.ttf\";\r\nconst IconsCSS = `\r\n@font-face {\r\n  src: url(${FontAwesome_ttf});\r\n  font-family: FontAwesome;\r\n}\r\n@font-face {\r\n  src: url(${Entypo_ttf});\r\n  font-family: Entypo;\r\n}\r\n@font-face {\r\n  src: url(${Octicons_ttf});\r\n  font-family: Octicons;\r\n}\r\n@font-face {\r\n  src: url(${SimpleLineIcons_ttf});\r\n  font-family: SimpleLineIcons;\r\n}\r\n@font-face {\r\n  src: url(${MaterialIcons_ttf});\r\n  font-family: MaterialIcons;\r\n}\r\n@font-face {\r\n  src: url(${EvilIcons_ttf});\r\n  font-family: EvilIcons;\r\n}\r\n@font-face {\r\n  src: url(${Feather_ttf});\r\n  font-family: Feather;\r\n}\r\n@font-face {\r\n  src: url(${Ionicons_ttf});\r\n  font-family: Ionicons;\r\n}\r\n@font-face {\r\n  src: url(${MaterialCommunityIcons_ttf});\r\n  font-family: MaterialCommunityIcons;\r\n}\r\n`;\r\n\r\nconst style = document.createElement(\"style\");\r\nstyle.type = \"text/css\";\r\nif (style.styleSheet) style.styleSheet.cssText = IconsCSS;\r\nelse style.appendChild(document.createTextNode(IconsCSS));\r\n\r\ndocument.head.appendChild(style);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction HeaderComponent(props) {\r\n  return (\r\n    <Container {...props}>\r\n      <ContainerMainHeader>\r\n        <TitleHeader>{props.text1 || \"Mentoria 2020\"}</TitleHeader>\r\n      </ContainerMainHeader>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst ContainerMainHeader = styled.div`\r\n  /* \r\n  top: 0px;\r\n  left: 0px;\r\n  position: absolute;\r\n  width: 1280px; \r\n  height: 64px;\r\n  */\r\n  background-color: rgba(37, 35, 35, 1);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst TitleHeader = styled.span`\r\n  font-family: Roboto;\r\n  /* \r\n  top: 17px;\r\n  left: 541px; \r\n  position: absolute;\r\n  width: 500px;\r\n  height: 500px;\r\n  */\r\n  color: rgba(255, 255, 255, 1);\r\n  font-size: 50px;\r\n  font-weight: 700;\r\n  font-style: normal;\r\n`;\r\n\r\nexport default HeaderComponent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction ContainerMainComponent(props) {\r\n  return (\r\n    <Container {...props}>\r\n      <ContainerComponentStack>\r\n        <Group>\r\n            <SubtitleContent>Bem Vindo</SubtitleContent>\r\n            <TitleContent>Acesse ao portal da Mentoria 2020</TitleContent>\r\n            <ButtonPortal>\r\n              <ButtonOverlay href=\"https://portal-mentoria2020.netlify.com/\">\r\n                <TitleButton>Mentoria 2020</TitleButton>\r\n              </ButtonOverlay>\r\n            </ButtonPortal>\r\n        </Group>\r\n        <Image\r\n          src={require(\"../assets/images/image_bg.jpg\")}\r\n        />\r\n      </ContainerComponentStack>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 500px;\r\n  height: 500px;\r\n  object-fit: contain;\r\n  margin-top:5%;\r\n`;\r\n\r\nconst ButtonOverlay = styled.a`\r\n  display: flex;\r\n  background: none;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  width: 100%;\r\n  border: none;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n`;\r\nconst Group = styled.div`\r\n  background-color: rgba(60, 62, 85, 1);\r\n  height: 30%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  padding-top: 1%;\r\n`;\r\n\r\nconst SubtitleContent = styled.span`\r\n  font-family: Roboto;\r\n  color: rgba(255, 255, 255, 1);\r\n  font-size: 50px;\r\n  font-weight: 700;\r\n  font-style: normal;\r\n`;\r\n\r\nconst TitleContent = styled.span`\r\n  font-family: Roboto;\r\n  color: rgba(255, 255, 255, 1);\r\n  font-size: 30px;\r\n  font-weight: 700;\r\n  font-style: normal;\r\n`;\r\n\r\nconst ButtonPortal = styled.div`\r\n  width: 256px;\r\n  height: 64px;\r\n  background-color: rgba(98, 94, 168, 1);\r\n  border-radius: 15px;\r\n  border-color: #000000;\r\n  border-width: 0px;\r\n  flex-direction: column;\r\n  display: flex;\r\n  border-style: solid;\r\n  box-shadow: 5px 5px 0px 0.2px rgba(0, 0, 0, 1);\r\n  margin-top: 5%;\r\n\r\n  &:hover {\r\n    background-color: rgba(98, 94, 168, 0.75);\r\n  }\r\n`;\r\n\r\nconst TitleButton = styled.span`\r\n  font-family: Roboto;\r\n  color: rgba(255, 255, 255, 1);\r\n  font-size: 30px;\r\n  font-weight: 700;\r\n  font-style: normal;\r\n`;\r\n\r\nconst ContainerComponentStack = styled.div`\r\n  background-color: rgba(60, 62, 85, 1);\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  padding-top: 5%;\r\n`;\r\n\r\nexport default ContainerMainComponent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport HeaderComponent from \"../components/HeaderComponent\";\r\nimport ContainerMainComponent from \"../components/ContainerMainComponent\";\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <Layout>\r\n      <HeaderComponent\r\n        style={{\r\n          width: \"100%\",\r\n          height: 100\r\n        }}\r\n        text1=\"\"\r\n      />\r\n      \r\n      <ContainerMainComponent\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"100vh\"\r\n          }}\r\n      />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nconst Layout = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  height: 100vh;\r\n  width: 100vw;\r\n`;\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./icons.js\";\r\nimport Home from \"./screens/Home\";\r\nimport \"./style.css\";\r\n\r\nfunction App() {\r\n  return <Home />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = \"./service-worker.js\";\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}