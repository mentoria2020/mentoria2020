{"version":3,"sources":["assets/images/image_bg.jpg","icons.js","components/HeaderComponent.js","components/ContainerMainComponent.js","screens/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IconsCSS","concat","FontAwesome_ttf","Entypo_ttf","Octicons_ttf","SimpleLineIcons_ttf","MaterialIcons_ttf","EvilIcons_ttf","Feather_ttf","Ionicons_ttf","MaterialCommunityIcons_ttf","style","document","createElement","type","styleSheet","cssText","appendChild","createTextNode","head","Container","styled","div","_templateObject","ContainerMainHeader","_templateObject2","TitleHeader","span","_templateObject3","HeaderComponent","props","react_default","a","text1","ContainerMainComponent_templateObject","Image","img","ContainerMainComponent_templateObject2","ButtonOverlay","ContainerMainComponent_templateObject3","Group","_templateObject4","SubtitleContent","_templateObject5","TitleContent","_templateObject6","ButtonPortal","_templateObject7","TitleButton","_templateObject8","ContainerComponentStack","_templateObject9","ContainerMainComponent","ContainerMainComponent_Container","href","src","require","Layout","Home_templateObject","Home","components_HeaderComponent","width","height","components_ContainerMainComponent","App","screens_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qSCUlCC,EAAQ,8BAAAC,OAEDC,IAFC,iEAAAD,OAMDE,IANC,4DAAAF,OAUDG,IAVC,8DAAAH,OAcDI,IAdC,qEAAAJ,OAkBDK,IAlBC,mEAAAL,OAsBDM,IAtBC,+DAAAN,OA0BDO,IA1BC,6DAAAP,OA8BDQ,IA9BC,8DAAAR,OAkCDS,IAlCC,mDAuCRC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,KAAO,WACTH,EAAMI,WAAYJ,EAAMI,WAAWC,QAAUhB,EAC5CW,EAAMM,YAAYL,SAASM,eAAelB,IAE/CY,SAASO,KAAKF,YAAYN,2uBCzC1B,IAAMS,EAAYC,IAAOC,IAAVC,KAKTC,EAAsBH,IAAOC,IAAVG,KAgBnBC,EAAcL,IAAOM,KAAVC,KAeFC,EA9Cf,SAAyBC,GACvB,OACEC,EAAAC,EAAAnB,cAACO,EAAcU,EACbC,EAAAC,EAAAnB,cAACW,EAAD,KACEO,EAAAC,EAAAnB,cAACa,EAAD,KAAcI,EAAMG,OAAS,2/DCiBrC,IAAMb,EAAYC,IAAOC,IAAVY,KAKTC,EAAQd,IAAOe,IAAVC,KAOLC,EAAgBjB,IAAOW,EAAVO,KAWbC,EAAQnB,IAAOC,IAAVmB,KASLC,EAAkBrB,IAAOM,KAAVgB,KAQfC,EAAevB,IAAOM,KAAVkB,KAQZC,EAAezB,IAAOC,IAAVyB,KAkBZC,EAAc3B,IAAOM,KAAVsB,KAQXC,EAA0B7B,IAAOC,IAAV6B,KAWdC,GA1Gf,SAAgCtB,GAC9B,OACEC,EAAAC,EAAAnB,cAACwC,EAAcvB,EACbC,EAAAC,EAAAnB,cAACqC,EAAD,KACEnB,EAAAC,EAAAnB,cAAC2B,EAAD,KACET,EAAAC,EAAAnB,cAAC6B,EAAD,kBACAX,EAAAC,EAAAnB,cAAC+B,EAAD,sDAGAb,EAAAC,EAAAnB,cAACiC,EAAD,KACEf,EAAAC,EAAAnB,cAACyB,EAAD,CAAegB,KAAK,4CAClBvB,EAAAC,EAAAnB,cAACmC,EAAD,yBAINjB,EAAAC,EAAAnB,cAACsB,EAAD,CAAOoB,IAAKC,EAAQ,0LCQ5B,IAAMC,GAASpC,IAAOC,IAAVoC,MAQGC,GA7Bf,SAAc7B,GACZ,OACEC,EAAAC,EAAAnB,cAAC4C,GAAD,KACE1B,EAAAC,EAAAnB,cAAC+C,EAAD,CACEjD,MAAO,CACLkD,MAAO,OACPC,OAAQ,KAEV7B,MAAM,KAGRF,EAAAC,EAAAnB,cAACkD,GAAD,CACIpD,MAAO,CACLkD,MAAO,OACPC,OAAQ,mBCVLE,OAJf,WACE,OAAOjC,EAAAC,EAAAnB,cAACoD,GAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,0DCZNC,IAASC,OAAOzC,EAAAC,EAAAnB,cAAC4D,GAAD,MAAS7D,SAAS8D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cfe7cc17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image_bg.78d7aa03.jpg\";","/* eslint-disable camelcase */\nimport FontAwesome_ttf from \"react-native-vector-icons/Fonts/FontAwesome.ttf\";\nimport Entypo_ttf from \"react-native-vector-icons/Fonts/Entypo.ttf\";\nimport Octicons_ttf from \"react-native-vector-icons/Fonts/Octicons.ttf\";\nimport SimpleLineIcons_ttf from \"react-native-vector-icons/Fonts/SimpleLineIcons.ttf\";\nimport MaterialIcons_ttf from \"react-native-vector-icons/Fonts/MaterialIcons.ttf\";\nimport EvilIcons_ttf from \"react-native-vector-icons/Fonts/EvilIcons.ttf\";\nimport Feather_ttf from \"react-native-vector-icons/Fonts/Feather.ttf\";\nimport Ionicons_ttf from \"react-native-vector-icons/Fonts/Ionicons.ttf\";\nimport MaterialCommunityIcons_ttf from \"react-native-vector-icons/Fonts/MaterialCommunityIcons.ttf\";\nconst IconsCSS = `\n@font-face {\n  src: url(${FontAwesome_ttf});\n  font-family: FontAwesome;\n}\n@font-face {\n  src: url(${Entypo_ttf});\n  font-family: Entypo;\n}\n@font-face {\n  src: url(${Octicons_ttf});\n  font-family: Octicons;\n}\n@font-face {\n  src: url(${SimpleLineIcons_ttf});\n  font-family: SimpleLineIcons;\n}\n@font-face {\n  src: url(${MaterialIcons_ttf});\n  font-family: MaterialIcons;\n}\n@font-face {\n  src: url(${EvilIcons_ttf});\n  font-family: EvilIcons;\n}\n@font-face {\n  src: url(${Feather_ttf});\n  font-family: Feather;\n}\n@font-face {\n  src: url(${Ionicons_ttf});\n  font-family: Ionicons;\n}\n@font-face {\n  src: url(${MaterialCommunityIcons_ttf});\n  font-family: MaterialCommunityIcons;\n}\n`;\n\nconst style = document.createElement(\"style\");\nstyle.type = \"text/css\";\nif (style.styleSheet) style.styleSheet.cssText = IconsCSS;\nelse style.appendChild(document.createTextNode(IconsCSS));\n\ndocument.head.appendChild(style);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nfunction HeaderComponent(props) {\n  return (\n    <Container {...props}>\n      <ContainerMainHeader>\n        <TitleHeader>{props.text1 || \"Mentoria 2020\"}</TitleHeader>\n      </ContainerMainHeader>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ContainerMainHeader = styled.div`\n  /* \n  top: 0px;\n  left: 0px;\n  position: absolute;\n  width: 1280px; \n  height: 64px;\n  */\n  background-color: rgba(37, 35, 35, 1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst TitleHeader = styled.span`\n  font-family: Roboto;\n  /* \n  top: 17px;\n  left: 541px; \n  position: absolute;\n  width: 500px;\n  height: 500px;\n  */\n  color: rgba(255, 255, 255, 1);\n  font-size: 50px;\n  font-weight: 700;\n  font-style: normal;\n`;\n\nexport default HeaderComponent;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nfunction ContainerMainComponent(props) {\n  return (\n    <Container {...props}>\n      <ContainerComponentStack>\n        <Group>\n          <SubtitleContent>Bem Vindo</SubtitleContent>\n          <TitleContent>\n            Acesse ao portal de projetos da Mentoria 2020\n          </TitleContent>\n          <ButtonPortal>\n            <ButtonOverlay href=\"https://portal-mentoria2020.netlify.com/\">\n              <TitleButton>Mentoria 2020</TitleButton>\n            </ButtonOverlay>\n          </ButtonPortal>\n        </Group>\n        <Image src={require(\"../assets/images/image_bg.jpg\")} />\n      </ContainerComponentStack>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Image = styled.img`\n  width: 500px;\n  height: 500px;\n  object-fit: contain;\n  margin-top: 5%;\n`;\n\nconst ButtonOverlay = styled.a`\n  display: flex;\n  background: none;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n  border: none;\n  text-decoration: none;\n  cursor: pointer;\n`;\nconst Group = styled.div`\n  background-color: rgba(60, 62, 85, 1);\n  height: 30%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding-top: 1%;\n`;\n\nconst SubtitleContent = styled.span`\n  font-family: Roboto;\n  color: rgba(255, 255, 255, 1);\n  font-size: 50px;\n  font-weight: 700;\n  font-style: normal;\n`;\n\nconst TitleContent = styled.span`\n  font-family: Roboto;\n  color: rgba(255, 255, 255, 1);\n  font-size: 30px;\n  font-weight: 700;\n  font-style: normal;\n`;\n\nconst ButtonPortal = styled.div`\n  width: 256px;\n  height: 64px;\n  background-color: rgba(98, 94, 168, 1);\n  border-radius: 15px;\n  border-color: #000000;\n  border-width: 0px;\n  flex-direction: column;\n  display: flex;\n  border-style: solid;\n  box-shadow: 5px 5px 0px 0.2px rgba(0, 0, 0, 1);\n  margin-top: 5%;\n\n  &:hover {\n    background-color: rgba(98, 94, 168, 0.75);\n  }\n`;\n\nconst TitleButton = styled.span`\n  font-family: Roboto;\n  color: rgba(255, 255, 255, 1);\n  font-size: 30px;\n  font-weight: 700;\n  font-style: normal;\n`;\n\nconst ContainerComponentStack = styled.div`\n  /* background-color: rgba(60, 62, 85, 1); */\n  background-color: #3c3e55;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  padding-top: 5%;\n`;\n\nexport default ContainerMainComponent;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport HeaderComponent from \"../components/HeaderComponent\";\nimport ContainerMainComponent from \"../components/ContainerMainComponent\";\n\nfunction Home(props) {\n  return (\n    <Layout>\n      <HeaderComponent\n        style={{\n          width: \"100%\",\n          height: 100\n        }}\n        text1=\"\"\n      />\n      \n      <ContainerMainComponent\n          style={{\n            width: \"100%\",\n            height: \"100vh\"\n          }}\n      />\n    </Layout>\n  );\n}\n\nconst Layout = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100vh;\n  width: 100vw;\n`;\n\nexport default Home;\n","import React from \"react\";\nimport \"./icons.js\";\nimport Home from \"./screens/Home\";\nimport \"./style.css\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = \"./service-worker.js\";\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}